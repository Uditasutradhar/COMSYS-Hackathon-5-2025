# Config
data_path = "/content/drive/MyDrive/AI_demos/Comys_Hackathon5/Task_B"
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
batch_size = 32
epochs = 15 #can change
margin = 1.0

# Transforms
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.RandomHorizontalFlip(),
    transforms.ColorJitter(0.2, 0.2, 0.2, 0.1),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

# Dataset & Loader
train_dataset = FaceVerificationDataset(root_dir=data_path, split='train', transform=transform)
train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)

# Model, loss, optimizer
model = FaceEmbeddingModel().to(device)
criterion = ContrastiveLoss(margin=margin)
optimizer = optim.Adam(model.parameters(), lr=1e-4)

# Training
model.train()
for epoch in range(epochs):
    running_loss = 0.0
    pbar = tqdm(train_loader, desc=f"Epoch {epoch+1}/{epochs}")
    for img1, img2, label in pbar:
        img1, img2, label = img1.to(device), img2.to(device), label.to(device)
        out1 = model(img1)
        out2 = model(img2)
        loss = criterion(out1, out2, label)

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        running_loss += loss.item()
        pbar.set_postfix({'Loss': f"{loss.item():.4f}"})

    print(f"Epoch {epoch+1} - Avg Loss: {running_loss / len(train_loader):.4f}")

# Save model
os.makedirs("models", exist_ok=True)
torch.save(model.state_dict(), "models/face_verification.pth")
